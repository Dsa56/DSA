#include <iostream>
#include <stack>
#include <string>
using namespace std;

class BTNODE {
    BTNODE *left, *right;
    char data;

public:
    BTNODE() {
        left = right = NULL;
        data = '\0';
    }
    friend class ExpressionTree;
};

class ExpressionTree {
    BTNODE *root;

public:
    ExpressionTree() {
        root = NULL;
    }

    void create(string);
    void Inorder(BTNODE *);
    void Preorder(BTNODE *);
    void Postorder(BTNODE *);
    void Delete_tree(BTNODE *);
    BTNODE* getRoot() { return root; }
    void setRoot(BTNODE* r) { root = r; }

    friend int main();
};

void ExpressionTree::create(string s) {
    stack<BTNODE *> s1;
    BTNODE *T1, *T2, *T3;

    for (int i = s.length() - 1; i >= 0; i--) {
        if (isalnum(s[i])) {
            T1 = new BTNODE;
            T1->data = s[i];
            s1.push(T1);
        } else {
            T1 = new BTNODE;
            T1->data = s[i];

            T3 = s1.top(); s1.pop();
            T2 = s1.top(); s1.pop();

            T1->left = T3;
            T1->right = T2;

            s1.push(T1);
        }
    }

    root = s1.top(); s1.pop();
}

void ExpressionTree::Inorder(BTNODE *T) {
    if (T != NULL) {
        Inorder(T->left);
        cout << "\t" << T->data;
        Inorder(T->right);
    }
}

void ExpressionTree::Preorder(BTNODE *T) {
    if (T != NULL) {
        cout << "\t" << T->data;
        Preorder(T->left);
        Preorder(T->right);
    }
}

void ExpressionTree::Postorder(BTNODE *T) {
    if (T == NULL)
        return;

    stack<BTNODE *> S1, S2;
    S1.push(T);

    while (!S1.empty()) {
        T = S1.top();
        S1.pop();
        S2.push(T);

        if (T->left != NULL)
            S1.push(T->left);
        if (T->right != NULL)
            S1.push(T->right);
    }

    while (!S2.empty()) {
        cout << "\t" << S2.top()->data;
        S2.pop();
    }
}

void ExpressionTree::Delete_tree(BTNODE *T) {
    if (T != NULL) {
        Delete_tree(T->left);
        Delete_tree(T->right);
        delete T;
    }
}

int main() {
    ExpressionTree E;
    string s;
    int ch;

    do {
        cout << "\n---------------Menu-------------";
        cout << "\n1. Create Expression Tree";
        cout << "\n2. Infix Expression";
        cout << "\n3. Prefix Expression";
        cout << "\n4. Postfix Expression";
        cout << "\n5. Delete the Tree";
        cout << "\n6. Exit";
        cout << "\n--------------------------------";
        cout << "\nEnter your choice: ";
        cin >> ch;

        switch (ch) {
            case 1:
                cout << "\nEnter the prefix expression: ";
                cin >> s;
                E.create(s);
                break;

            case 2:
                if (E.getRoot() == NULL)
                    cout << "\nTree is empty...";
                else {
                    cout << "\nInfix Expression =>";
                    E.Inorder(E.getRoot());
                }
                break;

            case 3:
                if (E.getRoot() == NULL)
                    cout << "\nTree is empty...";
                else {
                    cout << "\nPrefix Expression =>";
                    E.Preorder(E.getRoot());
                }
                break;

            case 4:
                if (E.getRoot() == NULL)
                    cout << "\nTree is empty...";
                else {
                    cout << "\nPostfix Expression =>";
                    E.Postorder(E.getRoot());
                }
                break;

            case 5:
                if (E.getRoot() == NULL)
                    cout << "\nTree is already empty...";
                else {
                    E.Delete_tree(E.getRoot());
                    E.setRoot(NULL);
                    cout << "\nTree deleted...";
                }
                break;

            case 6:
                break;

            default:
                cout << "\nEnter correct choice!";
        }
    } while (ch != 6);

    return 0;
}
